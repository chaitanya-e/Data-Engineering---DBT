{"creation_time": "2024-04-22T08:54:55+00:00", "days_back": 7, "models": {"model.custom_postgres.film_ratings_with_macro": {"name": "film_ratings_with_macro", "unique_id": "model.custom_postgres.film_ratings_with_macro", "owners": [], "tags": [], "package_name": "custom_postgres", "description": "", "full_path": "models/example/film_ratings_with_macro.sql", "meta": {}, "materialization": "table", "database_name": "destination_db", "schema_name": "public", "table_name": "film_ratings_with_macro", "patch_path": null, "model_name": "film_ratings_with_macro", "normalized_full_path": "custom_postgres/models/example/film_ratings_with_macro.sql", "fqn": "destination_db.public.film_ratings_with_macro", "artifact_type": "model"}, "model.custom_postgres.specific_movie_jinja": {"name": "specific_movie_jinja", "unique_id": "model.custom_postgres.specific_movie_jinja", "owners": [], "tags": [], "package_name": "custom_postgres", "description": "", "full_path": "models/example/specific_movie_jinja.sql", "meta": {}, "materialization": "table", "database_name": "destination_db", "schema_name": "public", "table_name": "specific_movie_jinja", "patch_path": null, "model_name": "specific_movie_jinja", "normalized_full_path": "custom_postgres/models/example/specific_movie_jinja.sql", "fqn": "destination_db.public.specific_movie_jinja", "artifact_type": "model"}, "model.custom_postgres.actor_filmography": {"name": "actor_filmography", "unique_id": "model.custom_postgres.actor_filmography", "owners": [], "tags": [], "package_name": "custom_postgres", "description": "", "full_path": "models/another example/actor_filmography.sql", "meta": {}, "materialization": "view", "database_name": "destination_db", "schema_name": "public", "table_name": "actor_filmography", "patch_path": null, "model_name": "actor_filmography", "normalized_full_path": "custom_postgres/models/another example/actor_filmography.sql", "fqn": "destination_db.public.actor_filmography", "artifact_type": "model"}, "model.custom_postgres.career_trajectory": {"name": "career_trajectory", "unique_id": "model.custom_postgres.career_trajectory", "owners": [], "tags": [], "package_name": "custom_postgres", "description": "", "full_path": "models/another example/career_trajectory.sql", "meta": {}, "materialization": "view", "database_name": "destination_db", "schema_name": "public", "table_name": "career_trajectory", "patch_path": null, "model_name": "career_trajectory", "normalized_full_path": "custom_postgres/models/another example/career_trajectory.sql", "fqn": "destination_db.public.career_trajectory", "artifact_type": "model"}, "model.custom_postgres.historical_comparisons": {"name": "historical_comparisons", "unique_id": "model.custom_postgres.historical_comparisons", "owners": [], "tags": [], "package_name": "custom_postgres", "description": "", "full_path": "models/another example/historical_comparisons.sql", "meta": {}, "materialization": "view", "database_name": "destination_db", "schema_name": "public", "table_name": "historical_comparisons", "patch_path": null, "model_name": "historical_comparisons", "normalized_full_path": "custom_postgres/models/another example/historical_comparisons.sql", "fqn": "destination_db.public.historical_comparisons", "artifact_type": "model"}, "model.custom_postgres.actors": {"name": "actors", "unique_id": "model.custom_postgres.actors", "owners": [], "tags": [], "package_name": "custom_postgres", "description": "", "full_path": "models/example/actors.sql", "meta": {}, "materialization": "table", "database_name": "destination_db", "schema_name": "public", "table_name": "actors", "patch_path": null, "model_name": "actors", "normalized_full_path": "custom_postgres/models/example/actors.sql", "fqn": "destination_db.public.actors", "artifact_type": "model"}, "model.custom_postgres.films": {"name": "films", "unique_id": "model.custom_postgres.films", "owners": [], "tags": [], "package_name": "custom_postgres", "description": "This table contains details about films.", "full_path": "models/example/films.sql", "meta": {}, "materialization": "table", "database_name": "destination_db", "schema_name": "public", "table_name": "films", "patch_path": "custom_postgres://models/example/schema.yml", "model_name": "films", "normalized_full_path": "custom_postgres/models/example/films.sql", "fqn": "destination_db.public.films", "artifact_type": "model"}, "model.custom_postgres.film_actors": {"name": "film_actors", "unique_id": "model.custom_postgres.film_actors", "owners": [], "tags": [], "package_name": "custom_postgres", "description": "", "full_path": "models/example/film_actors.sql", "meta": {}, "materialization": "table", "database_name": "destination_db", "schema_name": "public", "table_name": "film_actors", "patch_path": null, "model_name": "film_actors", "normalized_full_path": "custom_postgres/models/example/film_actors.sql", "fqn": "destination_db.public.film_actors", "artifact_type": "model"}, "model.custom_postgres.film_ratings": {"name": "film_ratings", "unique_id": "model.custom_postgres.film_ratings", "owners": [], "tags": [], "package_name": "custom_postgres", "description": "This table maps films to the ratings and defines a rating category.", "full_path": "models/example/film_ratings.sql", "meta": {}, "materialization": "table", "database_name": "destination_db", "schema_name": "public", "table_name": "film_ratings", "patch_path": "custom_postgres://models/example/schema.yml", "model_name": "film_ratings", "normalized_full_path": "custom_postgres/models/example/film_ratings.sql", "fqn": "destination_db.public.film_ratings", "artifact_type": "model"}, "model.custom_postgres.specific_user_rating_jinja": {"name": "specific_user_rating_jinja", "unique_id": "model.custom_postgres.specific_user_rating_jinja", "owners": [], "tags": [], "package_name": "custom_postgres", "description": "", "full_path": "models/example/specific_user_rating_jinja.sql", "meta": {}, "materialization": "table", "database_name": "destination_db", "schema_name": "public", "table_name": "specific_user_rating_jinja", "patch_path": null, "model_name": "specific_user_rating_jinja", "normalized_full_path": "custom_postgres/models/example/specific_user_rating_jinja.sql", "fqn": "destination_db.public.specific_user_rating_jinja", "artifact_type": "model"}, "source.custom_postgres.destination_db.films": {"name": "films", "unique_id": "source.custom_postgres.destination_db.films", "owners": [], "tags": [], "package_name": "custom_postgres", "description": "List of films.", "full_path": "models/example/sources.yml", "meta": {}, "materialization": null, "source_name": "destination_db", "database_name": "destination_db", "schema_name": "public", "table_name": "films", "model_name": "films", "normalized_full_path": "custom_postgres/sources/example/sources.yml", "fqn": "destination_db.public.films", "artifact_type": "source"}, "source.custom_postgres.destination_db.actors": {"name": "actors", "unique_id": "source.custom_postgres.destination_db.actors", "owners": [], "tags": [], "package_name": "custom_postgres", "description": "List of actors.", "full_path": "models/example/sources.yml", "meta": {}, "materialization": null, "source_name": "destination_db", "database_name": "destination_db", "schema_name": "public", "table_name": "actors", "model_name": "actors", "normalized_full_path": "custom_postgres/sources/example/sources.yml", "fqn": "destination_db.public.actors", "artifact_type": "source"}, "source.custom_postgres.destination_db.film_actors": {"name": "film_actors", "unique_id": "source.custom_postgres.destination_db.film_actors", "owners": [], "tags": [], "package_name": "custom_postgres", "description": "Mapping between films and actors.", "full_path": "models/example/sources.yml", "meta": {}, "materialization": null, "source_name": "destination_db", "database_name": "destination_db", "schema_name": "public", "table_name": "film_actors", "model_name": "film_actors", "normalized_full_path": "custom_postgres/sources/example/sources.yml", "fqn": "destination_db.public.film_actors", "artifact_type": "source"}}, "groups": {"dbt": {"custom_postgres": {"models": {"example": {"__files__": [{"node_id": "model.custom_postgres.film_ratings_with_macro", "resource_type": "model"}, {"node_id": "model.custom_postgres.specific_movie_jinja", "resource_type": "model"}, {"node_id": "model.custom_postgres.actors", "resource_type": "model"}, {"node_id": "model.custom_postgres.films", "resource_type": "model"}, {"node_id": "model.custom_postgres.film_actors", "resource_type": "model"}, {"node_id": "model.custom_postgres.film_ratings", "resource_type": "model"}, {"node_id": "model.custom_postgres.specific_user_rating_jinja", "resource_type": "model"}]}, "another example": {"__files__": [{"node_id": "model.custom_postgres.actor_filmography", "resource_type": "model"}, {"node_id": "model.custom_postgres.career_trajectory", "resource_type": "model"}, {"node_id": "model.custom_postgres.historical_comparisons", "resource_type": "model"}]}}, "sources": {"example": {"__files__": [{"node_id": "source.custom_postgres.destination_db.films", "resource_type": "source"}, {"node_id": "source.custom_postgres.destination_db.actors", "resource_type": "source"}, {"node_id": "source.custom_postgres.destination_db.film_actors", "resource_type": "source"}]}}}}, "tags": {"No tags": [{"node_id": "model.custom_postgres.film_ratings_with_macro", "resource_type": "model"}, {"node_id": "model.custom_postgres.specific_movie_jinja", "resource_type": "model"}, {"node_id": "model.custom_postgres.actor_filmography", "resource_type": "model"}, {"node_id": "model.custom_postgres.career_trajectory", "resource_type": "model"}, {"node_id": "model.custom_postgres.historical_comparisons", "resource_type": "model"}, {"node_id": "model.custom_postgres.actors", "resource_type": "model"}, {"node_id": "model.custom_postgres.films", "resource_type": "model"}, {"node_id": "model.custom_postgres.film_actors", "resource_type": "model"}, {"node_id": "model.custom_postgres.film_ratings", "resource_type": "model"}, {"node_id": "model.custom_postgres.specific_user_rating_jinja", "resource_type": "model"}, {"node_id": "source.custom_postgres.destination_db.films", "resource_type": "source"}, {"node_id": "source.custom_postgres.destination_db.actors", "resource_type": "source"}, {"node_id": "source.custom_postgres.destination_db.film_actors", "resource_type": "source"}]}, "owners": {"No owners": [{"node_id": "model.custom_postgres.film_ratings_with_macro", "resource_type": "model"}, {"node_id": "model.custom_postgres.specific_movie_jinja", "resource_type": "model"}, {"node_id": "model.custom_postgres.actor_filmography", "resource_type": "model"}, {"node_id": "model.custom_postgres.career_trajectory", "resource_type": "model"}, {"node_id": "model.custom_postgres.historical_comparisons", "resource_type": "model"}, {"node_id": "model.custom_postgres.actors", "resource_type": "model"}, {"node_id": "model.custom_postgres.films", "resource_type": "model"}, {"node_id": "model.custom_postgres.film_actors", "resource_type": "model"}, {"node_id": "model.custom_postgres.film_ratings", "resource_type": "model"}, {"node_id": "model.custom_postgres.specific_user_rating_jinja", "resource_type": "model"}, {"node_id": "source.custom_postgres.destination_db.films", "resource_type": "source"}, {"node_id": "source.custom_postgres.destination_db.actors", "resource_type": "source"}, {"node_id": "source.custom_postgres.destination_db.film_actors", "resource_type": "source"}]}}, "invocation": {"invocation_id": null, "detected_at": null, "command": null, "selected": null, "full_refresh": null, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}, "test_results": {"model.custom_postgres.films": [{"metadata": {"test_unique_id": "test.custom_postgres.custom_test_for_user_rating_range_check_films_user_rating__5_0__3_0.5ef5937768", "elementary_unique_id": "test.custom_postgres.custom_test_for_user_rating_range_check_films_user_rating__5_0__3_0.5ef5937768.user_rating.generic", "database_name": "destination_db", "schema_name": "public", "table_name": "films", "column_name": "user_rating", "test_name": "custom_test_for_user_rating_range_check", "test_display_name": "Custom Test For User Rating Range Check", "latest_run_time": "2024-04-22T08:52:41+00:00", "latest_run_time_utc": "2024-04-22T08:52:41+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.films", "table_unique_id": "destination_db.public.films", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "WITH User_Ratings AS (\n    SELECT\n        DISTINCT user_rating AS ratings\n    FROM\n        \"destination_db\".\"public\".\"films\"\n)\n\nSELECT\n    *\nFROM\n    User_Ratings\nWHERE\n    ratings < 3.0 and\n    ratings > 5.0", "test_params": {"max_rating": 5.0, "min_rating": 3.0, "column_name": "user_rating", "model": "{{ get_where_subquery(ref('films')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "WITH User_Ratings AS (\n    SELECT\n        DISTINCT user_rating AS ratings\n    FROM\n        \"destination_db\".\"public\".\"films\"\n)\n\nSELECT\n    *\nFROM\n    User_Ratings\nWHERE\n    ratings < 3.0 and\n    ratings > 5.0"}, "configuration": {"test_name": "custom_test_for_user_rating_range_check", "test_params": {"max_rating": 5.0, "min_rating": 3.0, "column_name": "user_rating", "model": "{{ get_where_subquery(ref('films')) }}"}}, "test_tags": []}, "test_results": {"display_name": "custom_test_for_user_rating_range_check", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.custom_postgres.custom_test_for_year_check_films_release_date__2024.136596b306", "elementary_unique_id": "test.custom_postgres.custom_test_for_year_check_films_release_date__2024.136596b306.release_date.generic", "database_name": "destination_db", "schema_name": "public", "table_name": "films", "column_name": "release_date", "test_name": "custom_test_for_year_check", "test_display_name": "Custom Test For Year Check", "latest_run_time": "2024-04-22T08:52:41+00:00", "latest_run_time_utc": "2024-04-22T08:52:41+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.films", "table_unique_id": "destination_db.public.films", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "WITH release_years AS (\nSELECT \n    EXTRACT(YEAR FROM release_date) as release_year\nFROM\n    \"destination_db\".\"public\".\"films\"\n)\n\nSELECT * FROM release_years\nWHERE release_year > 2024", "test_params": {"max_year": 2024, "column_name": "release_date", "model": "{{ get_where_subquery(ref('films')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "WITH release_years AS (\nSELECT \n    EXTRACT(YEAR FROM release_date) as release_year\nFROM\n    \"destination_db\".\"public\".\"films\"\n)\n\nSELECT * FROM release_years\nWHERE release_year > 2024"}, "configuration": {"test_name": "custom_test_for_year_check", "test_params": {"max_year": 2024, "column_name": "release_date", "model": "{{ get_where_subquery(ref('films')) }}"}}, "test_tags": []}, "test_results": {"display_name": "custom_test_for_year_check", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.custom_postgres.custom_test_simple_films_title.ec6505a8bf", "elementary_unique_id": "test.custom_postgres.custom_test_simple_films_title.ec6505a8bf.title.generic", "database_name": "destination_db", "schema_name": "public", "table_name": "films", "column_name": "title", "test_name": "custom_test_simple", "test_display_name": "Custom Test Simple", "latest_run_time": "2024-04-22T08:52:41+00:00", "latest_run_time_utc": "2024-04-22T08:52:41+00:00", "latest_run_status": "fail", "model_unique_id": "model.custom_postgres.films", "table_unique_id": "destination_db.public.films", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "SELECT CURRENT_TIME", "test_params": {"column_name": "title", "model": "{{ get_where_subquery(ref('films')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": "Got 1 result, configured to fail if != 0", "result_query": "SELECT CURRENT_TIME"}, "configuration": {"test_name": "custom_test_simple", "test_params": {"column_name": "title", "model": "{{ get_where_subquery(ref('films')) }}"}}, "test_tags": []}, "test_results": {"display_name": "custom_test_simple", "results_sample": [{"current_time": "08:52:41.645052+00:00"}], "error_message": "Got 1 result, configured to fail if != 0", "failed_rows_count": 1}}, {"metadata": {"test_unique_id": "test.custom_postgres.not_null_films_film_id.602ed45955", "elementary_unique_id": "test.custom_postgres.not_null_films_film_id.602ed45955.film_id.generic", "database_name": "destination_db", "schema_name": "public", "table_name": "films", "column_name": "film_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-22T08:52:42+00:00", "latest_run_time_utc": "2024-04-22T08:52:42+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.films", "table_unique_id": "destination_db.public.films", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select film_id\nfrom \"destination_db\".\"public\".\"films\"\nwhere film_id is null", "test_params": {"column_name": "film_id", "model": "{{ get_where_subquery(ref('films')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select film_id\nfrom \"destination_db\".\"public\".\"films\"\nwhere film_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "film_id", "model": "{{ get_where_subquery(ref('films')) }}"}}, "test_tags": []}, "test_results": {"display_name": "not_null", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.custom_postgres.unique_films_film_id.2ddc566c1c", "elementary_unique_id": "test.custom_postgres.unique_films_film_id.2ddc566c1c.film_id.generic", "database_name": "destination_db", "schema_name": "public", "table_name": "films", "column_name": "film_id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-04-22T08:52:42+00:00", "latest_run_time_utc": "2024-04-22T08:52:42+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.films", "table_unique_id": "destination_db.public.films", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    film_id as unique_field,\n    count(*) as n_records\n\nfrom \"destination_db\".\"public\".\"films\"\nwhere film_id is not null\ngroup by film_id\nhaving count(*) > 1", "test_params": {"column_name": "film_id", "model": "{{ get_where_subquery(ref('films')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    film_id as unique_field,\n    count(*) as n_records\n\nfrom \"destination_db\".\"public\".\"films\"\nwhere film_id is not null\ngroup by film_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "film_id", "model": "{{ get_where_subquery(ref('films')) }}"}}, "test_tags": []}, "test_results": {"display_name": "unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}], "model.custom_postgres.film_ratings": [{"metadata": {"test_unique_id": "test.custom_postgres.accepted_values_film_ratings_rating_category__Excellent__Good__Average__Poor.8822a09869", "elementary_unique_id": "test.custom_postgres.accepted_values_film_ratings_rating_category__Excellent__Good__Average__Poor.8822a09869.rating_category.generic", "database_name": "destination_db", "schema_name": "public", "table_name": "film_ratings", "column_name": "rating_category", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-04-22T08:52:40+00:00", "latest_run_time_utc": "2024-04-22T08:52:40+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.film_ratings", "table_unique_id": "destination_db.public.film_ratings", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        rating_category as value_field,\n        count(*) as n_records\n\n    from \"destination_db\".\"public\".\"film_ratings\"\n    group by rating_category\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Excellent','Good','Average','Poor'\n)", "test_params": {"values": ["Excellent", "Good", "Average", "Poor"], "column_name": "rating_category", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        rating_category as value_field,\n        count(*) as n_records\n\n    from \"destination_db\".\"public\".\"film_ratings\"\n    group by rating_category\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Excellent','Good','Average','Poor'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["Excellent", "Good", "Average", "Poor"], "column_name": "rating_category", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}}, "test_tags": ["film_ratings_test_group"]}, "test_results": {"display_name": "accepted_values", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.custom_postgres.custom_test_for_user_rating_range_check_film_ratings_user_rating__4_5__4_2.a88437cd38", "elementary_unique_id": "test.custom_postgres.custom_test_for_user_rating_range_check_film_ratings_user_rating__4_5__4_2.a88437cd38.user_rating.generic", "database_name": "destination_db", "schema_name": "public", "table_name": "film_ratings", "column_name": "user_rating", "test_name": "custom_test_for_user_rating_range_check", "test_display_name": "Custom Test For User Rating Range Check", "latest_run_time": "2024-04-22T08:52:41+00:00", "latest_run_time_utc": "2024-04-22T08:52:41+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.film_ratings", "table_unique_id": "destination_db.public.film_ratings", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "WITH User_Ratings AS (\n    SELECT\n        DISTINCT user_rating AS ratings\n    FROM\n        \"destination_db\".\"public\".\"film_ratings\"\n)\n\nSELECT\n    *\nFROM\n    User_Ratings\nWHERE\n    ratings < 4.2 and\n    ratings > 4.5", "test_params": {"max_rating": 4.5, "min_rating": 4.2, "column_name": "user_rating", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "WITH User_Ratings AS (\n    SELECT\n        DISTINCT user_rating AS ratings\n    FROM\n        \"destination_db\".\"public\".\"film_ratings\"\n)\n\nSELECT\n    *\nFROM\n    User_Ratings\nWHERE\n    ratings < 4.2 and\n    ratings > 4.5"}, "configuration": {"test_name": "custom_test_for_user_rating_range_check", "test_params": {"max_rating": 4.5, "min_rating": 4.2, "column_name": "user_rating", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}}, "test_tags": ["film_ratings_test_group"]}, "test_results": {"display_name": "custom_test_for_user_rating_range_check", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.custom_postgres.dbt_expectations_expect_column_values_to_be_between_film_ratings_user_rating__5_0__2_0.8d44b369e5", "elementary_unique_id": "test.custom_postgres.dbt_expectations_expect_column_values_to_be_between_film_ratings_user_rating__5_0__2_0.8d44b369e5.user_rating.expectation", "database_name": "destination_db", "schema_name": "public", "table_name": "film_ratings", "column_name": "user_rating", "test_name": "expect_column_values_to_be_between", "test_display_name": "Expect Column Values To Be Between", "latest_run_time": "2024-04-22T08:52:41+00:00", "latest_run_time_utc": "2024-04-22T08:52:41+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.film_ratings", "table_unique_id": "destination_db.public.film_ratings", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and user_rating >= 2.0 and user_rating <= 5.0\n)\n as expression\n\n\n    from \"destination_db\".\"public\".\"film_ratings\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 2.0, "max_value": 5.0, "column_name": "user_rating", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}, "test_created_at": null, "description": "Expect each column value to be between two values.", "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and user_rating >= 2.0 and user_rating <= 5.0\n)\n as expression\n\n\n    from \"destination_db\".\"public\".\"film_ratings\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_be_between", "test_params": {"min_value": 2.0, "max_value": 5.0, "column_name": "user_rating", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}}, "test_tags": []}, "test_results": {"display_name": "expect_column_values_to_be_between", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.custom_postgres.dbt_expectations_expect_column_values_to_be_of_type_film_ratings_release_date__date.ba7cd60268", "elementary_unique_id": "test.custom_postgres.dbt_expectations_expect_column_values_to_be_of_type_film_ratings_release_date__date.ba7cd60268.release_date.expectation", "database_name": "destination_db", "schema_name": "public", "table_name": "film_ratings", "column_name": "release_date", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-04-22T08:52:42+00:00", "latest_run_time_utc": "2024-04-22T08:52:42+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.film_ratings", "table_unique_id": "destination_db.public.film_ratings", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('FILM_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TITLE' as TEXT) as relation_column,\n            cast('CHARACTER VARYING' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RELEASE_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as TEXT) as relation_column,\n            cast('NUMERIC' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATING' as TEXT) as relation_column,\n            cast('CHARACTER VARYING' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_RATING' as TEXT) as relation_column,\n            cast('NUMERIC' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATING_CATEGORY' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTORS' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RELEASE_DATE'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "date", "column_name": "release_date", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('FILM_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TITLE' as TEXT) as relation_column,\n            cast('CHARACTER VARYING' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RELEASE_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as TEXT) as relation_column,\n            cast('NUMERIC' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATING' as TEXT) as relation_column,\n            cast('CHARACTER VARYING' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_RATING' as TEXT) as relation_column,\n            cast('NUMERIC' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATING_CATEGORY' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTORS' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RELEASE_DATE'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "date", "column_name": "release_date", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}}, "test_tags": []}, "test_results": {"display_name": "expect_column_values_to_be_of_type", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.custom_postgres.dbt_expectations_expect_column_values_to_be_unique_film_ratings_film_id.956357cd1b", "elementary_unique_id": "test.custom_postgres.dbt_expectations_expect_column_values_to_be_unique_film_ratings_film_id.956357cd1b.film_id.expectation", "database_name": "destination_db", "schema_name": "public", "table_name": "film_ratings", "column_name": "film_id", "test_name": "expect_column_values_to_be_unique", "test_display_name": "Expect Column Values To Be Unique", "latest_run_time": "2024-04-22T08:52:42+00:00", "latest_run_time_utc": "2024-04-22T08:52:42+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.film_ratings", "table_unique_id": "destination_db.public.film_ratings", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with validation_errors as (\n\n    select\n        film_id,\n        count(*) as \"n_records\"\n    from \"destination_db\".\"public\".\"film_ratings\"\n    where\n        1=1\n        and \n    not (\n        film_id is null\n        \n    )\n\n\n    \n    group by\n        film_id\n    having count(*) > 1\n\n)\nselect * from validation_errors", "test_params": {"column_name": "film_id", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}, "test_created_at": null, "description": "Expect each column value to be unique.", "result": {"result_description": null, "result_query": "with validation_errors as (\n\n    select\n        film_id,\n        count(*) as \"n_records\"\n    from \"destination_db\".\"public\".\"film_ratings\"\n    where\n        1=1\n        and \n    not (\n        film_id is null\n        \n    )\n\n\n    \n    group by\n        film_id\n    having count(*) > 1\n\n)\nselect * from validation_errors"}, "configuration": {"test_name": "expect_column_values_to_be_unique", "test_params": {"column_name": "film_id", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}}, "test_tags": []}, "test_results": {"display_name": "expect_column_values_to_be_unique", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.custom_postgres.relationships_film_ratings_title__title__ref_films_.f1a2e7259f", "elementary_unique_id": "test.custom_postgres.relationships_film_ratings_title__title__ref_films_.f1a2e7259f.title.generic", "database_name": "destination_db", "schema_name": "public", "table_name": "film_ratings", "column_name": "title", "test_name": "relationships", "test_display_name": "Relationships", "latest_run_time": "2024-04-22T08:52:42+00:00", "latest_run_time_utc": "2024-04-22T08:52:42+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.film_ratings", "table_unique_id": "destination_db.public.film_ratings", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with child as (\n    select title as from_field\n    from \"destination_db\".\"public\".\"film_ratings\"\n    where title is not null\n),\n\nparent as (\n    select title as to_field\n    from \"destination_db\".\"public\".\"films\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null", "test_params": {"to": "ref('films')", "field": "title", "column_name": "title", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}, "test_created_at": null, "description": "This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".", "result": {"result_description": null, "result_query": "with child as (\n    select title as from_field\n    from \"destination_db\".\"public\".\"film_ratings\"\n    where title is not null\n),\n\nparent as (\n    select title as to_field\n    from \"destination_db\".\"public\".\"films\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null"}, "configuration": {"test_name": "relationships", "test_params": {"to": "ref('films')", "field": "title", "column_name": "title", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}}, "test_tags": []}, "test_results": {"display_name": "relationships", "results_sample": null, "error_message": null, "failed_rows_count": -1}}, {"metadata": {"test_unique_id": "test.custom_postgres.Singular Test_film_ratings", "elementary_unique_id": "test.custom_postgres.Singular Test_film_ratings.None.singular", "database_name": "destination_db", "schema_name": "public", "table_name": "film_ratings", "column_name": null, "test_name": "Singular Test_film_ratings", "test_display_name": "Singular Test Film Ratings", "latest_run_time": "2024-04-22T08:52:40+00:00", "latest_run_time_utc": "2024-04-22T08:52:40+00:00", "latest_run_status": "fail", "model_unique_id": "model.custom_postgres.film_ratings", "table_unique_id": "destination_db.public.film_ratings", "test_type": "dbt_test", "test_sub_type": "singular", "test_query": "/*This is a test to check if the particular column does not have any row <= 4.5*/\nSELECT *\nFROM \"destination_db\".\"public\".\"film_ratings\"\nWHERE user_rating <= 4.5", "test_params": {}, "test_created_at": null, "description": null, "result": {"result_description": "Got 8 results, configured to fail if != 0", "result_query": "/*This is a test to check if the particular column does not have any row <= 4.5*/\nSELECT *\nFROM \"destination_db\".\"public\".\"film_ratings\"\nWHERE user_rating <= 4.5"}, "configuration": {"test_name": "Singular Test_film_ratings", "test_params": {}}, "test_tags": []}, "test_results": {"display_name": "Singular Test_film_ratings", "results_sample": [{"film_id": 7, "title": "Forrest Gump", "release_date": "1994-07-06", "price": 8.99, "rating": "PG-13", "user_rating": 4.5, "rating_category": "Excellent", "actors": "Tom Hanks"}, {"film_id": 8, "title": "Toy Story", "release_date": "1995-11-22", "price": 7.99, "rating": "G", "user_rating": 4.4, "rating_category": "Good", "actors": "Tom Hanks"}, {"film_id": 9, "title": "Jurassic Park", "release_date": "1993-06-11", "price": 9.99, "rating": "PG-13", "user_rating": 4.3, "rating_category": "Good", "actors": "Sam Neill"}, {"film_id": 10, "title": "Avatar", "release_date": "2009-12-18", "price": 12.99, "rating": "PG-13", "user_rating": 4.2, "rating_category": "Good", "actors": "Sam Worthington"}, {"film_id": 11, "title": "Blade Runner 2049", "release_date": "2017-10-06", "price": 13.99, "rating": "R", "user_rating": 4.3, "rating_category": "Good", "actors": "Ryan Gosling"}], "error_message": "Got 8 results, configured to fail if != 0", "failed_rows_count": 8}}]}, "test_results_totals": {"model.custom_postgres.films": {"errors": 0, "warnings": 0, "passed": 4, "failures": 1}, "model.custom_postgres.film_ratings": {"errors": 0, "warnings": 0, "passed": 6, "failures": 1}}, "test_runs": {"model.custom_postgres.films": [{"metadata": {"test_unique_id": "test.custom_postgres.custom_test_for_user_rating_range_check_films_user_rating__5_0__3_0.5ef5937768", "elementary_unique_id": "test.custom_postgres.custom_test_for_user_rating_range_check_films_user_rating__5_0__3_0.5ef5937768.user_rating.generic", "database_name": "destination_db", "schema_name": "public", "table_name": "films", "column_name": "user_rating", "test_name": "custom_test_for_user_rating_range_check", "test_display_name": "Custom Test For User Rating Range Check", "latest_run_time": "2024-04-22T08:52:41+00:00", "latest_run_time_utc": "2024-04-22T08:52:41+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.films", "table_unique_id": "destination_db.public.films", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "WITH User_Ratings AS (\n    SELECT\n        DISTINCT user_rating AS ratings\n    FROM\n        \"destination_db\".\"public\".\"films\"\n)\n\nSELECT\n    *\nFROM\n    User_Ratings\nWHERE\n    ratings < 3.0 and\n    ratings > 5.0", "test_params": {"max_rating": 5.0, "min_rating": 3.0, "column_name": "user_rating", "model": "{{ get_where_subquery(ref('films')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "WITH User_Ratings AS (\n    SELECT\n        DISTINCT user_rating AS ratings\n    FROM\n        \"destination_db\".\"public\".\"films\"\n)\n\nSELECT\n    *\nFROM\n    User_Ratings\nWHERE\n    ratings < 3.0 and\n    ratings > 5.0"}, "configuration": {"test_name": "custom_test_for_user_rating_range_check", "test_params": {"max_rating": 5.0, "min_rating": 3.0, "column_name": "user_rating", "model": "{{ get_where_subquery(ref('films')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T08:52:41+00:00", "id": "662ae945-8d36-4ae7-9c65-e703528a03bc", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.custom_postgres.custom_test_for_year_check_films_release_date__2024.136596b306", "elementary_unique_id": "test.custom_postgres.custom_test_for_year_check_films_release_date__2024.136596b306.release_date.generic", "database_name": "destination_db", "schema_name": "public", "table_name": "films", "column_name": "release_date", "test_name": "custom_test_for_year_check", "test_display_name": "Custom Test For Year Check", "latest_run_time": "2024-04-22T08:52:41+00:00", "latest_run_time_utc": "2024-04-22T08:52:41+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.films", "table_unique_id": "destination_db.public.films", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "WITH release_years AS (\nSELECT \n    EXTRACT(YEAR FROM release_date) as release_year\nFROM\n    \"destination_db\".\"public\".\"films\"\n)\n\nSELECT * FROM release_years\nWHERE release_year > 2024", "test_params": {"max_year": 2024, "column_name": "release_date", "model": "{{ get_where_subquery(ref('films')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "WITH release_years AS (\nSELECT \n    EXTRACT(YEAR FROM release_date) as release_year\nFROM\n    \"destination_db\".\"public\".\"films\"\n)\n\nSELECT * FROM release_years\nWHERE release_year > 2024"}, "configuration": {"test_name": "custom_test_for_year_check", "test_params": {"max_year": 2024, "column_name": "release_date", "model": "{{ get_where_subquery(ref('films')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T08:52:41+00:00", "id": "662ae945-8d36-4ae7-9c65-e703528a03bc", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.custom_postgres.custom_test_simple_films_title.ec6505a8bf", "elementary_unique_id": "test.custom_postgres.custom_test_simple_films_title.ec6505a8bf.title.generic", "database_name": "destination_db", "schema_name": "public", "table_name": "films", "column_name": "title", "test_name": "custom_test_simple", "test_display_name": "Custom Test Simple", "latest_run_time": "2024-04-22T08:52:41+00:00", "latest_run_time_utc": "2024-04-22T08:52:41+00:00", "latest_run_status": "fail", "model_unique_id": "model.custom_postgres.films", "table_unique_id": "destination_db.public.films", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "SELECT CURRENT_TIME", "test_params": {"column_name": "title", "model": "{{ get_where_subquery(ref('films')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": "Got 1 result, configured to fail if != 0", "result_query": "SELECT CURRENT_TIME"}, "configuration": {"test_name": "custom_test_simple", "test_params": {"column_name": "title", "model": "{{ get_where_subquery(ref('films')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 1.0, "totals": {"errors": 0, "warnings": 0, "passed": 0, "failures": 1}, "invocations": [{"affected_rows": 1, "time_utc": "2024-04-22T08:52:41+00:00", "id": "662ae945-8d36-4ae7-9c65-e703528a03bc", "status": "fail"}], "description": "There were 1 failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.custom_postgres.not_null_films_film_id.602ed45955", "elementary_unique_id": "test.custom_postgres.not_null_films_film_id.602ed45955.film_id.generic", "database_name": "destination_db", "schema_name": "public", "table_name": "films", "column_name": "film_id", "test_name": "not_null", "test_display_name": "Not Null", "latest_run_time": "2024-04-22T08:52:42+00:00", "latest_run_time_utc": "2024-04-22T08:52:42+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.films", "table_unique_id": "destination_db.public.films", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select film_id\nfrom \"destination_db\".\"public\".\"films\"\nwhere film_id is null", "test_params": {"column_name": "film_id", "model": "{{ get_where_subquery(ref('films')) }}"}, "test_created_at": null, "description": "This test validates that there are no `null` values present in a column.", "result": {"result_description": null, "result_query": "select film_id\nfrom \"destination_db\".\"public\".\"films\"\nwhere film_id is null"}, "configuration": {"test_name": "not_null", "test_params": {"column_name": "film_id", "model": "{{ get_where_subquery(ref('films')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T08:52:42+00:00", "id": "662ae945-8d36-4ae7-9c65-e703528a03bc", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.custom_postgres.unique_films_film_id.2ddc566c1c", "elementary_unique_id": "test.custom_postgres.unique_films_film_id.2ddc566c1c.film_id.generic", "database_name": "destination_db", "schema_name": "public", "table_name": "films", "column_name": "film_id", "test_name": "unique", "test_display_name": "Unique", "latest_run_time": "2024-04-22T08:52:42+00:00", "latest_run_time_utc": "2024-04-22T08:52:42+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.films", "table_unique_id": "destination_db.public.films", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "select\n    film_id as unique_field,\n    count(*) as n_records\n\nfrom \"destination_db\".\"public\".\"films\"\nwhere film_id is not null\ngroup by film_id\nhaving count(*) > 1", "test_params": {"column_name": "film_id", "model": "{{ get_where_subquery(ref('films')) }}"}, "test_created_at": null, "description": "This test validates that there are no duplicate values present in a field.", "result": {"result_description": null, "result_query": "select\n    film_id as unique_field,\n    count(*) as n_records\n\nfrom \"destination_db\".\"public\".\"films\"\nwhere film_id is not null\ngroup by film_id\nhaving count(*) > 1"}, "configuration": {"test_name": "unique", "test_params": {"column_name": "film_id", "model": "{{ get_where_subquery(ref('films')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T08:52:42+00:00", "id": "662ae945-8d36-4ae7-9c65-e703528a03bc", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}], "model.custom_postgres.film_ratings": [{"metadata": {"test_unique_id": "test.custom_postgres.accepted_values_film_ratings_rating_category__Excellent__Good__Average__Poor.8822a09869", "elementary_unique_id": "test.custom_postgres.accepted_values_film_ratings_rating_category__Excellent__Good__Average__Poor.8822a09869.rating_category.generic", "database_name": "destination_db", "schema_name": "public", "table_name": "film_ratings", "column_name": "rating_category", "test_name": "accepted_values", "test_display_name": "Accepted Values", "latest_run_time": "2024-04-22T08:52:40+00:00", "latest_run_time_utc": "2024-04-22T08:52:40+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.film_ratings", "table_unique_id": "destination_db.public.film_ratings", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with all_values as (\n\n    select\n        rating_category as value_field,\n        count(*) as n_records\n\n    from \"destination_db\".\"public\".\"film_ratings\"\n    group by rating_category\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Excellent','Good','Average','Poor'\n)", "test_params": {"values": ["Excellent", "Good", "Average", "Poor"], "column_name": "rating_category", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}, "test_created_at": null, "description": "This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.", "result": {"result_description": null, "result_query": "with all_values as (\n\n    select\n        rating_category as value_field,\n        count(*) as n_records\n\n    from \"destination_db\".\"public\".\"film_ratings\"\n    group by rating_category\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Excellent','Good','Average','Poor'\n)"}, "configuration": {"test_name": "accepted_values", "test_params": {"values": ["Excellent", "Good", "Average", "Poor"], "column_name": "rating_category", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}}, "test_tags": ["film_ratings_test_group"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T08:52:40+00:00", "id": "662ae945-8d36-4ae7-9c65-e703528a03bc", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.custom_postgres.custom_test_for_user_rating_range_check_film_ratings_user_rating__4_5__4_2.a88437cd38", "elementary_unique_id": "test.custom_postgres.custom_test_for_user_rating_range_check_film_ratings_user_rating__4_5__4_2.a88437cd38.user_rating.generic", "database_name": "destination_db", "schema_name": "public", "table_name": "film_ratings", "column_name": "user_rating", "test_name": "custom_test_for_user_rating_range_check", "test_display_name": "Custom Test For User Rating Range Check", "latest_run_time": "2024-04-22T08:52:41+00:00", "latest_run_time_utc": "2024-04-22T08:52:41+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.film_ratings", "table_unique_id": "destination_db.public.film_ratings", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "WITH User_Ratings AS (\n    SELECT\n        DISTINCT user_rating AS ratings\n    FROM\n        \"destination_db\".\"public\".\"film_ratings\"\n)\n\nSELECT\n    *\nFROM\n    User_Ratings\nWHERE\n    ratings < 4.2 and\n    ratings > 4.5", "test_params": {"max_rating": 4.5, "min_rating": 4.2, "column_name": "user_rating", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}, "test_created_at": null, "description": null, "result": {"result_description": null, "result_query": "WITH User_Ratings AS (\n    SELECT\n        DISTINCT user_rating AS ratings\n    FROM\n        \"destination_db\".\"public\".\"film_ratings\"\n)\n\nSELECT\n    *\nFROM\n    User_Ratings\nWHERE\n    ratings < 4.2 and\n    ratings > 4.5"}, "configuration": {"test_name": "custom_test_for_user_rating_range_check", "test_params": {"max_rating": 4.5, "min_rating": 4.2, "column_name": "user_rating", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}}, "test_tags": ["film_ratings_test_group"]}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T08:52:41+00:00", "id": "662ae945-8d36-4ae7-9c65-e703528a03bc", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.custom_postgres.dbt_expectations_expect_column_values_to_be_between_film_ratings_user_rating__5_0__2_0.8d44b369e5", "elementary_unique_id": "test.custom_postgres.dbt_expectations_expect_column_values_to_be_between_film_ratings_user_rating__5_0__2_0.8d44b369e5.user_rating.expectation", "database_name": "destination_db", "schema_name": "public", "table_name": "film_ratings", "column_name": "user_rating", "test_name": "expect_column_values_to_be_between", "test_display_name": "Expect Column Values To Be Between", "latest_run_time": "2024-04-22T08:52:41+00:00", "latest_run_time_utc": "2024-04-22T08:52:41+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.film_ratings", "table_unique_id": "destination_db.public.film_ratings", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and user_rating >= 2.0 and user_rating <= 5.0\n)\n as expression\n\n\n    from \"destination_db\".\"public\".\"film_ratings\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors", "test_params": {"min_value": 2.0, "max_value": 5.0, "column_name": "user_rating", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}, "test_created_at": null, "description": "Expect each column value to be between two values.", "result": {"result_description": null, "result_query": "with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and user_rating >= 2.0 and user_rating <= 5.0\n)\n as expression\n\n\n    from \"destination_db\".\"public\".\"film_ratings\"\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors"}, "configuration": {"test_name": "expect_column_values_to_be_between", "test_params": {"min_value": 2.0, "max_value": 5.0, "column_name": "user_rating", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T08:52:41+00:00", "id": "662ae945-8d36-4ae7-9c65-e703528a03bc", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.custom_postgres.dbt_expectations_expect_column_values_to_be_of_type_film_ratings_release_date__date.ba7cd60268", "elementary_unique_id": "test.custom_postgres.dbt_expectations_expect_column_values_to_be_of_type_film_ratings_release_date__date.ba7cd60268.release_date.expectation", "database_name": "destination_db", "schema_name": "public", "table_name": "film_ratings", "column_name": "release_date", "test_name": "expect_column_values_to_be_of_type", "test_display_name": "Expect Column Values To Be Of Type", "latest_run_time": "2024-04-22T08:52:42+00:00", "latest_run_time_utc": "2024-04-22T08:52:42+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.film_ratings", "table_unique_id": "destination_db.public.film_ratings", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with relation_columns as (\n\n        \n        select\n            cast('FILM_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TITLE' as TEXT) as relation_column,\n            cast('CHARACTER VARYING' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RELEASE_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as TEXT) as relation_column,\n            cast('NUMERIC' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATING' as TEXT) as relation_column,\n            cast('CHARACTER VARYING' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_RATING' as TEXT) as relation_column,\n            cast('NUMERIC' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATING_CATEGORY' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTORS' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RELEASE_DATE'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data", "test_params": {"column_type": "date", "column_name": "release_date", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}, "test_created_at": null, "description": "Expect a column to be of a specified data type.", "result": {"result_description": null, "result_query": "with relation_columns as (\n\n        \n        select\n            cast('FILM_ID' as TEXT) as relation_column,\n            cast('INTEGER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TITLE' as TEXT) as relation_column,\n            cast('CHARACTER VARYING' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RELEASE_DATE' as TEXT) as relation_column,\n            cast('DATE' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as TEXT) as relation_column,\n            cast('NUMERIC' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATING' as TEXT) as relation_column,\n            cast('CHARACTER VARYING' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('USER_RATING' as TEXT) as relation_column,\n            cast('NUMERIC' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATING_CATEGORY' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTORS' as TEXT) as relation_column,\n            cast('TEXT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RELEASE_DATE'\n            and\n            relation_column_type not in ('DATE')\n\n    )\n    select *\n    from test_data"}, "configuration": {"test_name": "expect_column_values_to_be_of_type", "test_params": {"column_type": "date", "column_name": "release_date", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T08:52:42+00:00", "id": "662ae945-8d36-4ae7-9c65-e703528a03bc", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.custom_postgres.dbt_expectations_expect_column_values_to_be_unique_film_ratings_film_id.956357cd1b", "elementary_unique_id": "test.custom_postgres.dbt_expectations_expect_column_values_to_be_unique_film_ratings_film_id.956357cd1b.film_id.expectation", "database_name": "destination_db", "schema_name": "public", "table_name": "film_ratings", "column_name": "film_id", "test_name": "expect_column_values_to_be_unique", "test_display_name": "Expect Column Values To Be Unique", "latest_run_time": "2024-04-22T08:52:42+00:00", "latest_run_time_utc": "2024-04-22T08:52:42+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.film_ratings", "table_unique_id": "destination_db.public.film_ratings", "test_type": "dbt_test", "test_sub_type": "expectation", "test_query": "with validation_errors as (\n\n    select\n        film_id,\n        count(*) as \"n_records\"\n    from \"destination_db\".\"public\".\"film_ratings\"\n    where\n        1=1\n        and \n    not (\n        film_id is null\n        \n    )\n\n\n    \n    group by\n        film_id\n    having count(*) > 1\n\n)\nselect * from validation_errors", "test_params": {"column_name": "film_id", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}, "test_created_at": null, "description": "Expect each column value to be unique.", "result": {"result_description": null, "result_query": "with validation_errors as (\n\n    select\n        film_id,\n        count(*) as \"n_records\"\n    from \"destination_db\".\"public\".\"film_ratings\"\n    where\n        1=1\n        and \n    not (\n        film_id is null\n        \n    )\n\n\n    \n    group by\n        film_id\n    having count(*) > 1\n\n)\nselect * from validation_errors"}, "configuration": {"test_name": "expect_column_values_to_be_unique", "test_params": {"column_name": "film_id", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T08:52:42+00:00", "id": "662ae945-8d36-4ae7-9c65-e703528a03bc", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.custom_postgres.relationships_film_ratings_title__title__ref_films_.f1a2e7259f", "elementary_unique_id": "test.custom_postgres.relationships_film_ratings_title__title__ref_films_.f1a2e7259f.title.generic", "database_name": "destination_db", "schema_name": "public", "table_name": "film_ratings", "column_name": "title", "test_name": "relationships", "test_display_name": "Relationships", "latest_run_time": "2024-04-22T08:52:42+00:00", "latest_run_time_utc": "2024-04-22T08:52:42+00:00", "latest_run_status": "pass", "model_unique_id": "model.custom_postgres.film_ratings", "table_unique_id": "destination_db.public.film_ratings", "test_type": "dbt_test", "test_sub_type": "generic", "test_query": "with child as (\n    select title as from_field\n    from \"destination_db\".\"public\".\"film_ratings\"\n    where title is not null\n),\n\nparent as (\n    select title as to_field\n    from \"destination_db\".\"public\".\"films\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null", "test_params": {"to": "ref('films')", "field": "title", "column_name": "title", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}, "test_created_at": null, "description": "This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".", "result": {"result_description": null, "result_query": "with child as (\n    select title as from_field\n    from \"destination_db\".\"public\".\"film_ratings\"\n    where title is not null\n),\n\nparent as (\n    select title as to_field\n    from \"destination_db\".\"public\".\"films\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null"}, "configuration": {"test_name": "relationships", "test_params": {"to": "ref('films')", "field": "title", "column_name": "title", "model": "{{ get_where_subquery(ref('film_ratings')) }}"}}, "test_tags": []}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-04-22T08:52:42+00:00", "id": "662ae945-8d36-4ae7-9c65-e703528a03bc", "status": "pass"}], "description": "There were no failures, no errors and no warnings on the last 1 test runs."}}, {"metadata": {"test_unique_id": "test.custom_postgres.Singular Test_film_ratings", "elementary_unique_id": "test.custom_postgres.Singular Test_film_ratings.None.singular", "database_name": "destination_db", "schema_name": "public", "table_name": "film_ratings", "column_name": null, "test_name": "Singular Test_film_ratings", "test_display_name": "Singular Test Film Ratings", "latest_run_time": "2024-04-22T08:52:40+00:00", "latest_run_time_utc": "2024-04-22T08:52:40+00:00", "latest_run_status": "fail", "model_unique_id": "model.custom_postgres.film_ratings", "table_unique_id": "destination_db.public.film_ratings", "test_type": "dbt_test", "test_sub_type": "singular", "test_query": "/*This is a test to check if the particular column does not have any row <= 4.5*/\nSELECT *\nFROM \"destination_db\".\"public\".\"film_ratings\"\nWHERE user_rating <= 4.5", "test_params": {}, "test_created_at": null, "description": null, "result": {"result_description": "Got 8 results, configured to fail if != 0", "result_query": "/*This is a test to check if the particular column does not have any row <= 4.5*/\nSELECT *\nFROM \"destination_db\".\"public\".\"film_ratings\"\nWHERE user_rating <= 4.5"}, "configuration": {"test_name": "Singular Test_film_ratings", "test_params": {}}, "test_tags": []}, "test_runs": {"fail_rate": 1.0, "totals": {"errors": 0, "warnings": 0, "passed": 0, "failures": 1}, "invocations": [{"affected_rows": 8, "time_utc": "2024-04-22T08:52:40+00:00", "id": "662ae945-8d36-4ae7-9c65-e703528a03bc", "status": "fail"}], "description": "There were 1 failures, no errors and no warnings on the last 1 test runs."}}]}, "test_runs_totals": {"model.custom_postgres.films": {"errors": 0, "warnings": 0, "passed": 4, "failures": 1}, "model.custom_postgres.film_ratings": {"errors": 0, "warnings": 0, "passed": 6, "failures": 1}}, "coverages": {"model.custom_postgres.film_ratings": {"table_tests": 1, "column_tests": 6}, "model.custom_postgres.films": {"table_tests": 0, "column_tests": 5}}, "model_runs": [{"unique_id": "model.custom_postgres.actors", "schema": "public", "name": "actors", "status": "success", "last_exec_time": 1.4, "median_exec_time": 1.4, "compiled_code": "SELECT * FROM \"destination_db\".\"public\".\"actors\"", "last_generated_at": "2024-04-22T08:51:13+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "857608bb-7993-4fe7-8be4-23d8bec04463", "time_utc": "2024-04-22T08:51:13+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.4}]}, {"unique_id": "model.custom_postgres.film_actors", "schema": "public", "name": "film_actors", "status": "success", "last_exec_time": 1.1, "median_exec_time": 1.1, "compiled_code": "SELECT * FROM \"destination_db\".\"public\".\"film_actors\"", "last_generated_at": "2024-04-22T08:51:13+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "857608bb-7993-4fe7-8be4-23d8bec04463", "time_utc": "2024-04-22T08:51:13+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.1}]}, {"unique_id": "model.custom_postgres.films", "schema": "public", "name": "films", "status": "success", "last_exec_time": 1.0, "median_exec_time": 1.0, "compiled_code": "SELECT * FROM \"destination_db\".\"public\".\"films\"", "last_generated_at": "2024-04-22T08:51:13+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "857608bb-7993-4fe7-8be4-23d8bec04463", "time_utc": "2024-04-22T08:51:13+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 1.0}]}, {"unique_id": "model.custom_postgres.specific_movie_jinja", "schema": "public", "name": "specific_movie_jinja", "status": "success", "last_exec_time": 0.2, "median_exec_time": 0.2, "compiled_code": "\n\nSELECT *\nFROM \"destination_db\".\"public\".\"films\"\nWHERE title = 'Dunkirk'", "last_generated_at": "2024-04-22T08:51:13+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "857608bb-7993-4fe7-8be4-23d8bec04463", "time_utc": "2024-04-22T08:51:13+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 0.2}]}, {"unique_id": "model.custom_postgres.actor_filmography", "schema": "public", "name": "actor_filmography", "status": "success", "last_exec_time": 0.3, "median_exec_time": 0.3, "compiled_code": "-- models/actor_filmography.sql\n\nWITH actor_details AS (\n    SELECT\n        a.actor_id,\n        a.actor_name,\n        f.film_id,\n        f.title,\n        f.release_date,\n        f.price,\n        f.rating,\n        f.user_rating\n    FROM\n        \"destination_db\".\"public\".\"actors\" a\n    JOIN\n        \"destination_db\".\"public\".\"film_actors\" fa ON fa.actor_id = a.actor_id\n    JOIN\n        \"destination_db\".\"public\".\"films\" f ON f.film_id = fa.film_id\n)\n\nSELECT\n    actor_id,\n    actor_name,\n    ARRAY_AGG(title) AS films,\n    ARRAY_AGG(release_date) AS release_dates,\n    ARRAY_AGG(price) AS prices,\n    ARRAY_AGG(user_rating) AS user_ratings,\n    AVG(user_rating) AS average_user_rating,\n    AVG(price) AS average_film_price,\n    COUNT(film_id) AS total_films\nFROM\n    actor_details\nGROUP BY\n    actor_id, actor_name\nORDER BY\n    actor_name", "last_generated_at": "2024-04-22T08:51:13+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "857608bb-7993-4fe7-8be4-23d8bec04463", "time_utc": "2024-04-22T08:51:13+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.3}]}, {"unique_id": "model.custom_postgres.film_ratings", "schema": "public", "name": "film_ratings", "status": "success", "last_exec_time": 0.3, "median_exec_time": 0.3, "compiled_code": "WITH \nfilms_with_ratings AS (\n    SELECT \n        film_id,\n        title,\n        release_date,\n        price,\n        rating,\n        user_rating,\n        CASE\n            WHEN user_rating >= 4.5 THEN 'Excellent'\n            WHEN user_rating >= 4.0 THEN 'Good'\n            WHEN user_rating >= 3.0 THEN 'Average'\n            ELSE 'Poor'\n        END as rating_category\n    FROM \"destination_db\".\"public\".\"films\"\n),\n\nfilms_with_actors AS (\n    SELECT \n        f.film_id,\n        f.title,\n        STRING_AGG(a.actor_name,',') AS actors\n    FROM \"destination_db\".\"public\".\"films\" f\n    LEFT JOIN \"destination_db\".\"public\".\"film_actors\" fa ON f.film_id = fa.film_id\n    LEFT JOIN \"destination_db\".\"public\".\"actors\" a ON fa.actor_id = a.actor_id\n    GROUP BY f.film_id, f.title\n)\n\nSELECT\n    fwf.*,\n    fwa.actors\nFROM films_with_ratings fwf\nLEFT JOIN films_with_actors fwa ON fwf.film_id = fwa.film_id", "last_generated_at": "2024-04-22T08:51:13+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "857608bb-7993-4fe7-8be4-23d8bec04463", "time_utc": "2024-04-22T08:51:13+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 0.3}]}, {"unique_id": "model.custom_postgres.film_ratings_with_macro", "schema": "public", "name": "film_ratings_with_macro", "status": "success", "last_exec_time": 0.2, "median_exec_time": 0.2, "compiled_code": "\n\nWITH \nfilms_with_ratings_with_macro AS (\n    SELECT \n        film_id,\n        title,\n        release_date,\n        price,\n        rating,\n        user_rating,\n        CASE\n            WHEN user_rating >= 4.5 THEN 'Excellent'\n            WHEN user_rating >= 4.0 THEN 'Good'\n            WHEN user_rating >= 3.0 THEN 'Average'\n            ELSE 'Poor'\n        END as rating_category\n    FROM \"destination_db\".\"public\".\"films\"\n),\n\nfilms_with_actors_with_macro AS (\n    SELECT \n        f.film_id,\n        f.title,\n        STRING_AGG(a.actor_name,',') AS actors\n    FROM \"destination_db\".\"public\".\"films\" f\n    LEFT JOIN \"destination_db\".\"public\".\"film_actors\" fa ON f.film_id = fa.film_id\n    LEFT JOIN \"destination_db\".\"public\".\"actors\" a ON fa.actor_id = a.actor_id\n    GROUP BY f.film_id, f.title\n)\n\nSELECT\n    fwf.*,\n    fwa.actors\nFROM films_with_ratings_with_macro fwf\nLEFT JOIN films_with_actors_with_macro fwa ON fwf.film_id = fwa.film_id\n\n", "last_generated_at": "2024-04-22T08:51:13+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "857608bb-7993-4fe7-8be4-23d8bec04463", "time_utc": "2024-04-22T08:51:13+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 0.2}]}, {"unique_id": "model.custom_postgres.career_trajectory", "schema": "public", "name": "career_trajectory", "status": "success", "last_exec_time": 0.2, "median_exec_time": 0.2, "compiled_code": "-- models/career_trajectory.sql\n\nSELECT\n    actor_id,\n    actor_name,\n    ARRAY_AGG(films ORDER BY release_dates) AS film_titles,\n    ARRAY_AGG(release_dates ORDER BY release_dates) AS film_release_dates,\n    ARRAY_AGG(user_ratings ORDER BY release_dates) AS film_ratings\nFROM\n    \"destination_db\".\"public\".\"actor_filmography\"\nGROUP BY\n    actor_id, actor_name", "last_generated_at": "2024-04-22T08:51:13+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "857608bb-7993-4fe7-8be4-23d8bec04463", "time_utc": "2024-04-22T08:51:13+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.2}]}, {"unique_id": "model.custom_postgres.historical_comparisons", "schema": "public", "name": "historical_comparisons", "status": "success", "last_exec_time": 0.2, "median_exec_time": 0.2, "compiled_code": "-- models/historical_comparisons.sql\n\nSELECT\n    actor_id,\n    actor_name,\n    MIN(release_dates) AS career_start,\n    MAX(release_dates) AS career_end,\n    MAX(user_ratings) AS Max_user_rating,\n    MIN(user_ratings) AS Min_user_rating,\n    COUNT(*) AS total_films\nFROM\n    \"destination_db\".\"public\".\"actor_filmography\"\nGROUP BY\n    actor_id, actor_name", "last_generated_at": "2024-04-22T08:51:13+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "857608bb-7993-4fe7-8be4-23d8bec04463", "time_utc": "2024-04-22T08:51:13+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.2}]}, {"unique_id": "model.custom_postgres.specific_user_rating_jinja", "schema": "public", "name": "specific_user_rating_jinja", "status": "success", "last_exec_time": 0.2, "median_exec_time": 0.2, "compiled_code": "\n\nSELECT *\nFROM \"destination_db\".\"public\".\"film_ratings\"\nWHERE user_rating > '4.5'", "last_generated_at": "2024-04-22T08:51:13+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 1}, "runs": [{"id": "857608bb-7993-4fe7-8be4-23d8bec04463", "time_utc": "2024-04-22T08:51:13+00:00", "status": "success", "full_refresh": false, "materialization": "table", "execution_time": 0.2}]}], "model_runs_totals": {"model.custom_postgres.actors": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.custom_postgres.film_actors": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.custom_postgres.films": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.custom_postgres.specific_movie_jinja": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.custom_postgres.actor_filmography": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.custom_postgres.film_ratings": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.custom_postgres.film_ratings_with_macro": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.custom_postgres.career_trajectory": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.custom_postgres.historical_comparisons": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.custom_postgres.specific_user_rating_jinja": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}}, "filters": {"test_results": [{"name": "failures", "display_name": "Failures", "model_unique_ids": ["model.custom_postgres.films", "model.custom_postgres.film_ratings"]}, {"name": "passed", "display_name": "Passed", "model_unique_ids": ["model.custom_postgres.films", "model.custom_postgres.film_ratings"]}, {"name": "no_test", "display_name": "No Tests", "model_unique_ids": ["source.custom_postgres.destination_db.films", "model.custom_postgres.actors", "source.custom_postgres.destination_db.film_actors", "model.custom_postgres.specific_movie_jinja", "model.custom_postgres.actor_filmography", "model.custom_postgres.historical_comparisons", "source.custom_postgres.destination_db.actors", "model.custom_postgres.film_actors", "model.custom_postgres.career_trajectory", "model.custom_postgres.specific_user_rating_jinja", "model.custom_postgres.film_ratings_with_macro"]}], "test_runs": [{"name": "failures", "display_name": "Failures", "model_unique_ids": ["model.custom_postgres.films", "model.custom_postgres.film_ratings"]}, {"name": "passed", "display_name": "Passed", "model_unique_ids": ["model.custom_postgres.films", "model.custom_postgres.film_ratings"]}, {"name": "no_test", "display_name": "No Tests", "model_unique_ids": ["source.custom_postgres.destination_db.films", "model.custom_postgres.actors", "source.custom_postgres.destination_db.film_actors", "model.custom_postgres.specific_movie_jinja", "model.custom_postgres.actor_filmography", "model.custom_postgres.historical_comparisons", "source.custom_postgres.destination_db.actors", "model.custom_postgres.film_actors", "model.custom_postgres.career_trajectory", "model.custom_postgres.specific_user_rating_jinja", "model.custom_postgres.film_ratings_with_macro"]}], "model_runs": [{"name": "success", "display_name": "Successful Runs", "model_unique_ids": ["model.custom_postgres.film_ratings", "model.custom_postgres.actors", "model.custom_postgres.specific_user_rating_jinja", "model.custom_postgres.films", "model.custom_postgres.actor_filmography", "model.custom_postgres.historical_comparisons", "model.custom_postgres.film_actors", "model.custom_postgres.career_trajectory", "model.custom_postgres.specific_movie_jinja", "model.custom_postgres.film_ratings_with_macro"]}]}, "lineage": {"nodes": [{"id": "model.custom_postgres.film_ratings_with_macro", "type": "model", "sub_type": "table"}, {"id": "model.custom_postgres.specific_movie_jinja", "type": "model", "sub_type": "table"}, {"id": "model.custom_postgres.actor_filmography", "type": "model", "sub_type": "view"}, {"id": "model.custom_postgres.career_trajectory", "type": "model", "sub_type": "view"}, {"id": "model.custom_postgres.historical_comparisons", "type": "model", "sub_type": "view"}, {"id": "model.custom_postgres.actors", "type": "model", "sub_type": "table"}, {"id": "model.custom_postgres.films", "type": "model", "sub_type": "table"}, {"id": "model.custom_postgres.film_actors", "type": "model", "sub_type": "table"}, {"id": "model.custom_postgres.film_ratings", "type": "model", "sub_type": "table"}, {"id": "model.custom_postgres.specific_user_rating_jinja", "type": "model", "sub_type": "table"}, {"id": "source.custom_postgres.destination_db.films", "type": "source", "sub_type": null}, {"id": "source.custom_postgres.destination_db.actors", "type": "source", "sub_type": null}, {"id": "source.custom_postgres.destination_db.film_actors", "type": "source", "sub_type": null}], "edges": [["model.custom_postgres.film_ratings_with_macro", "model.custom_postgres.actors"], ["model.custom_postgres.film_ratings_with_macro", "model.custom_postgres.film_actors"], ["model.custom_postgres.film_ratings_with_macro", "model.custom_postgres.films"], ["model.custom_postgres.actors", "source.custom_postgres.destination_db.actors"], ["model.custom_postgres.film_actors", "source.custom_postgres.destination_db.film_actors"], ["model.custom_postgres.films", "source.custom_postgres.destination_db.films"], ["model.custom_postgres.specific_movie_jinja", "model.custom_postgres.films"], ["model.custom_postgres.actor_filmography", "model.custom_postgres.actors"], ["model.custom_postgres.actor_filmography", "model.custom_postgres.film_actors"], ["model.custom_postgres.actor_filmography", "model.custom_postgres.films"], ["model.custom_postgres.career_trajectory", "model.custom_postgres.actor_filmography"], ["model.custom_postgres.historical_comparisons", "model.custom_postgres.actor_filmography"], ["model.custom_postgres.film_ratings", "model.custom_postgres.actors"], ["model.custom_postgres.film_ratings", "model.custom_postgres.film_actors"], ["model.custom_postgres.film_ratings", "model.custom_postgres.films"], ["model.custom_postgres.specific_user_rating_jinja", "model.custom_postgres.film_ratings"]]}, "invocations": [{"invocation_id": "857608bb-7993-4fe7-8be4-23d8bec04463", "detected_at": null, "command": "run", "selected": "", "full_refresh": false, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}, {"invocation_id": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "detected_at": null, "command": "run", "selected": "elementary", "full_refresh": false, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}], "resources_latest_invocation": {"model.custom_postgres.actor_filmography": "857608bb-7993-4fe7-8be4-23d8bec04463", "model.custom_postgres.actors": "857608bb-7993-4fe7-8be4-23d8bec04463", "model.custom_postgres.career_trajectory": "857608bb-7993-4fe7-8be4-23d8bec04463", "model.custom_postgres.film_actors": "857608bb-7993-4fe7-8be4-23d8bec04463", "model.custom_postgres.film_ratings": "857608bb-7993-4fe7-8be4-23d8bec04463", "model.custom_postgres.film_ratings_with_macro": "857608bb-7993-4fe7-8be4-23d8bec04463", "model.custom_postgres.films": "857608bb-7993-4fe7-8be4-23d8bec04463", "model.custom_postgres.historical_comparisons": "857608bb-7993-4fe7-8be4-23d8bec04463", "model.custom_postgres.specific_movie_jinja": "857608bb-7993-4fe7-8be4-23d8bec04463", "model.custom_postgres.specific_user_rating_jinja": "857608bb-7993-4fe7-8be4-23d8bec04463", "model.elementary.alerts_anomaly_detection": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.alerts_dbt_models": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.alerts_dbt_source_freshness": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.alerts_dbt_tests": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.alerts_schema_changes": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.anomaly_threshold_sensitivity": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.data_monitoring_metrics": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.dbt_artifacts_hashes": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.dbt_columns": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.dbt_exposures": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.dbt_invocations": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.dbt_metrics": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.dbt_models": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.dbt_run_results": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.dbt_seeds": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.dbt_snapshots": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.dbt_source_freshness_results": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.dbt_sources": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.dbt_tests": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.elementary_test_results": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.enriched_columns": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.information_schema_columns": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.job_run_results": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.metadata": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.metrics_anomaly_score": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.model_run_results": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.monitors_runs": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.schema_columns_snapshot": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.snapshot_run_results": "b930b27d-6604-465e-bbff-1ffba8efcc8a", "model.elementary.test_result_rows": "b930b27d-6604-465e-bbff-1ffba8efcc8a"}, "invocations_job_identification": {}, "env": {"project_name": "custom_postgres", "env": "dev", "warehouse_type": "postgres"}, "tracking": {"posthog_api_key": "phc_56XBEzZmh02mGkadqLiYW51eECyYKWPyecVwkGdGUfg", "report_generator_anonymous_user_id": "1399eb20-d480-4655-a283-b6eefd650e73", "anonymous_warehouse_id": "f38309f1f632c4a3f9c567dda28c142bcdbb0b3079b1ed8550cfc72518b99b7a"}}